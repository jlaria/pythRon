write(paste0(
{if(printdate)date() else NULL},
...), "")
}
wlog("Hola mundo")
{if(printdate)date() else NULL}
printdate=T
{if(printdate)date() else NULL}
a = {if(printdate)date() else NULL}
a
typeof(a)
wlog = function(printdate=T, ...){
a = {if(printdate)date() else NULL}
write(paste0(
a,
...), "")
}
wlog("Hola mundo")
wlog = function(printdate = TRUE, ...){
a = {if(printdate)date() else NULL}
write(paste0(
a,
...), "")
}
wlog("Hola mundo")
wlog("Hola mundo")
a = {if(printdate)date() else NULL}
write(paste0(
a,
...), "")
wlog = function(printdate = TRUE, texto, ...){
a = {if(printdate)date() else NULL}
write(paste0(
a, texto
...), "")
wlog = function(printdate = TRUE, texto, ...){
a = {if(printdate)date() else NULL}
write(paste0(
a, texto,
...), "")
}
wlog("Hola mundo")
wlog = function(texto, ..., printdate=T){
a = {if(printdate)date() else NULL}
write(paste0(
a, texto,
...), "")
}
wlog("Hola mundo")
wlog = function(..., printdate=T){
write(paste0(
{if(printdate)date() else NULL},
...), "")
}
wlog("Hola mundo")
wlog = function(..., printdate=T){
write(paste0(
{if(printdate)date() else NULL}, "\t",
...), "")
}
wlog("Hola mundo")
wlog(printdate = F, "Hola Mundo!")
wlog("\t x = ",2, "\t y = ", 5, "\t x + y = ", 2+5, "\t FIN.")
wlog = function(..., printdate=T){
write(paste0(
{if(printdate)date() else NULL},
...), "")
}
wlog("\tHola mundo")
wlog(printdate = F, "Hola Mundo!")
wlog("\t x = ",2, "\t y = ", 5, "\t x + y = ", 2+5, "\t FIN.")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 5, fig.height = 5, fig.align = 'center', eval = T, collapse = T)
library(ggplot2)
mpg
search()
ls(name="package:ggplot2")
d = data(package = "ggplot2")
d$results[, "Item"]
nm = d$results[, "Item"]
data(list = nm, package="ggplot2")
lapply(mget(nm), dim)
head(txhousing)
msleep
msleep
data("USArrests")
head(USArrests)
data("HairEyeColor")
head(HairEyeColor)
head(HairEyeColor)
data("trees")
head(trees)
data("Titanic")
head(Titanic)
Titanic
mpg
data("BOD")
BOD
data("HairEyeColor")
HairEyeColor
data("women")
women
USArrests
load("/home/juank/Documents/Master/Clases/uc3m/Segundo/Optimizacion/Tarea 3/movies.RData")
load("/home/juank/Documents/Master/Clases/uc3m/Segundo/Optimizacion/Tarea 3/movies_data.RData")
trees
if(!require("ISLR"))install.packages("ISLR")
library(ggplot2)
library(ISLR)
data("Auto")
head(Auto)
data("Auto")
knitr::kable(head(Auto))
Auto$year
ggplot(data = Auto,
mapping = aes(x = weight, y = acceleration))+ # Notice the +
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg))+ # Notice the +
geom_point()
summary(Auto$cylinders)
Auto$cylinders = factor(Auto$cylinders)
Auto$cylinders = factor(Auto$cylinders)
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, color = cylinders))+
geom_point()
Auto$origin = factor(Auto$origin)
Auto$origin = factor(Auto$origin)
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, shape = origin))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, group = origin))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, color = origin))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, color = origin, shape = origin))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, size = acceleration))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, size = log(acceleration)))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, size = log(acceleration)/5))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, size = log(horsepower)))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg, size = horsepower))+
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg))+ # Notice the +
geom_point()
ggplot(data = Auto,
mapping = aes(x = weight, y = mpg))+
geom_point()+
geom_smooth()
ggplot(data = Auto,
mapping = aes(x = mpg))+
geom_histogram()
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 5, fig.height = 5, fig.align = 'center', eval = T, collapse = T)
ggplot(data = Auto,
mapping = aes(x = mpg))+
geom_histogram()+
stat_bin(bins = 10)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 5, fig.height = 5, fig.align = 'center', eval = F, collapse = T, echo = F)
?Trig
atan(1/3)
atan2(3,1)
atan2(1,3)
atan(1/3)
atan2(1, 1:1000)
data("cars")
cars
View(cars)
x = 1:1000
y = atan2(1, x)
z = 1/tan(y)
x == z
x = as.numeric(1:1000)
y = atan2(1, x)
z = 1/tan(y)
x == z
identical(x,z)
all.equal(x,z)
all.equal(x,z, tolerance = 0 )
all.equal(x,z, 0)
any(true_and_missing)
true_and_missing = c(T, NA, T)
mixed = c(T, NA, F)
any(true_and_missing)
all(true_and_missing)
any(false_and_missing)
false_and_missing = c(F, NA, F)
mixed = c(T, NA, F)
any(false_and_missing)
all(false_and_missing)
any(mixed)
all(mixed)
class(Inf)
storage.mode(infinity)
infinity = Inf
class(infinity)
typeof(infinity)
mode(infinity)
storage.mode(infinity)
pets = c("dog", "cat", "hamster", "gold-fish")
my.pets = sample(pets, 1000, replace = T)
head(my.pets)
summary(my.pets)
summary(factor(my.pets))
brocoli = 0
zanahoria = 1
remolacha = 2
lechuga = 3
col = 4
repollo = 5
aguacate = 6
aji = 7
tomate = 8
ls()
"a"%in%ls()
ls(pattern = "a")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 5, fig.height = 5, fig.align = 'center', eval = F, collapse = T, echo = F)
triang_num = (1:20)(1:20+1)/2
triang_num = (1:20)*(1:20+1)/2
triang_letters = letters[1:length(triang_num)]
names(triang_num) = letters
names(triang_num) = letters[1:20]
triang_num[names(triang_num)%in%c("a", "e", "i", "o", "u")]
diag(c(10:0, 1:10))
M = diag(c(10:0, 1:10))
M1 = diag(c(10:0, 1:10))
M1 = diag(c(10:0, 1:10))
M_up = diag(1, 20, 21)
M_up
M_down = diag(1, 20, 21)
M_down = rbind(rep(0, 21), M_down)
M_down
M_up = t(M_down)
M_up
M = M1 + M_up + M_down
M
eigen(M)
eigen(M)$values
M
plot(eigen(M)$values)
plot(eigen(M)$values, 0)
x2 = 0:9^2
x2 = (0:9)^2
l = list(rep(vector(), 10))
vector()
rep(vector(), 10)
l = list(c(), c())
l = list(sq_0_9 = c(0,1,4,9),
sq_10_19 = c(16))
x2 = (0:9)^2
iris
apply(iris[,-5], 1, mean)
apply(iris[,-5], 2, mean)
df = iris[,-5]
beaver1
beaver_df = data.frame(beaver1, id = 1)
beaver_df = rbind(data.frame(beaver1, id = 1),
data.frame(beaver2, id = 2))
beaver_df[, "activ"==1]
beaver_df[beaver_df$activ==1, ]
View(beaver_df)
subset(beaver_df, activ==1)
pi
multiples_of_pi = new.env()
multiples_of_pi[["two_pi"]] = 2*pi
assign(four_pi, 4*pi, envir = multiples_of_pi)
assign("four_pi", 4*pi, envir = multiples_of_pi)
ls(multiples_of_pi)
multiples_of_pi = new.env()
multiples_of_pi[["two_pi"]] = 2*pi
multiples_of_pi$three_pi = 3*pi
assign("four_pi", 4*pi, envir = multiples_of_pi)
ls(multiples_of_pi)
ls.str(multiples_of_pi)
is.even = function(x){
if(!is.finite(x)){
return(NA)
}else if(x%%2==0){
return(T)
}else{
return(F)
}
}
my.func = function(vect){
sapply(vect, is.even)
}
is.even(c(1,2,3, -2, -1, 0, Inf, -Inf, NaN, NA))
vect = c(1,2,3, -2, -1, 0, Inf, -Inf, NaN, NA)
sapply(vect, is.even)
my.func = function(vect){
return(sapply(vect, is.even))
}
is.even(c(1,2,3, -2, -1, 0, Inf, -Inf, NaN, NA))
sapply(vect, is.even)
my.func = function(vect){
x  = sapply(vect, is.even)
return(x)
}
is.even(c(1,2,3, -2, -1, 0, Inf, -Inf, NaN, NA))
sapply(vect, is.even)
vect = c(1,2,3, -2, -1, 0, Inf, -Inf, NaN, NA)
is.even(vect)
my.func(vect)
args(mean)
formals(mean)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 5, fig.height = 5, fig.align = 'center', eval = F, collapse = T, echo = F)
formalArgs(mean)
formals(mean)
args = formals(mean)
body = body(mean)
describe = function(f){
args = formals(mean)
body = body(mean)
return(list(args, body))
}
describe(mean)
describe = function(f){
args = formals(mean)
body = body(mean)
return(list(args=args, body=body))
}
describe(mean)
describe(mean(c(1,2,3)))
r = describe(mean(c(1,2,3)))
r$args$x
mean(1:3)
format(pi, digits = 16)
sprintf("%16f", pi)
sprintf("%9f", pi)
sprintf("%9d", pi)
sprintf("%.9f", pi)
sprintf("%.16f", pi)
format(pi, digits = 16)
sprintf("%.1f", pi)
sprintf("%.15f", pi)
x = c(
"Swan swam over the pond, Swim swan swim!",
"Swan swam back again - Well swum swan!"
)
strsplit(x, " ")
strsplit(x, c(" ", "!", "-"))
strsplit(x, c(" ", "!", "-", ","))
x
strsplit(x, c(","))
strsplit(x, c(" ", "!", "-", ","))
sub(",.-!", " ", x)
sub(" +$", " ", x)
sub(" +$", x, " ")
sub(pattern = " +$", x = x, replacement = " ")
sub("[[:space:]]+$", "", x)
sub("[[:space:]]+$", "", x[1])
str <- "Now is the time      "
sub(" +$", "", str)  ## spaces only
sub(" ", "", str)  ## spaces only
str <- "Now is the time      "
sub(" ", "", str)  ## spaces only
gsub(" ", "", str)  ## spaces only
str <- "Now is the time      "
gsub(" +$", "", str)  ## spaces only
gsub("!,-", "", x)  ## spaces only
gsub("!", "", x)  ## spaces only
gsub("!+,", "", x)  ## spaces only
gsub("([!,-])", "", x)  ## spaces only
x1 = gsub("([!,-])", "", x)  ## spaces only
strsplit(x1, " ")
x1 = gsub("([!,-])", "", x)
x1 = gsub(" +$", "", x1)
strsplit(x1, " ")
gsub(" +$", "", x1)
x1 = gsub("([!, - ])", "", x)
strsplit(x1, " ")
x1 = gsub("([!,-])", "", x)
strsplit(x1, " ")
strsplit(x1, "([!,-])")
strsplit(x, "([!,-])")
strsplit(x, "([!,- ])")
strsplit(x, "([!, - ])")
x1 = gsub("([!,-])", "", x)
strsplit(x, "([!, ])")
strsplit(x, " ([!,])")
strsplit(x, "([!,][ ])")
strsplit(x, "([ !,])")
strsplit(x, "([ !,-])")
strsplit(x, "[:punct:][:space:]")
strsplit(x, "([:punct:][:space:])")
strsplit(x, "[:punct:]")
strsplit(x, "[:punct:]")
strsplit(x, "[[:punct:]]")
strsplit(x, "[[:punct:][:space:]]")
strsplit(x, "[[:punct: ][:space:]]")
strsplit(x, "[[:punct:+$][:space:]]")
strsplit(x, "[[:punct:?][:space:]]")
strsplit(x, "[[:punct:]?[:space:]]")
strsplit(x, "[[:punct:]+$[:space:]]")
strsplit(x, "[[:punct:]+[:space:]]")
strsplit(x, "[[:punct:]*[:space:]]")
strsplit(x, "\W")
strsplit(x, "[\W]")
strsplit(x, "[\\W]")
strsplit(x, "\\W")
strsplit(x, "\\W.")
strsplit(x, "\\W")
?strplit
?strsplit
?regex
?base::regex
strsplit(x, ",? ")
strsplit(x, "[,? ][-? ]")
strsplit(x, "([,? ][-? ])")
strsplit(x, "[[,? ][-? ]]")
strsplit(x, "[[,? ]]")
strsplit(x, "[,? ]")
strsplit(x, "[[,-]? ]")
strsplit(x, "[,? ]")
qsub("\\W", "", x)
gsub("\\W", "", x)
?base::regex
gsub("\\W", " ", x)
strsplit(x, "[ ? ]")
gsub("\\W", " ", x)
x1 = gsub("\\W", " ", x)
strsplit(x1, "[ ? ]")
strsplit(x1, "  ")
strsplit(x1, " .")
strsplit(x1, " ")
strsplit(x1, "\s")
strsplit(x1, "\\s")
strsplit(x1, "[:space:]+")
strsplit(x1, "[:space:]")
strsplit(x1, "[:space:]")
strsplit(x1, " ")
strsplit(x1, " +")
x1 = gsub("[:punct:]", " ", x)
gsub("[:punct:]", " ", x)
x1 = gsub("[[:punct:]]", " ", x)
gsub("[[:punct:]]", " ", x)
strsplit(x1, " +")
?ls.str
?subset
?rbind
?t
?summary
?factor
?head
if(NA)2
ifelse(NA, 1, 2)
sea_shells = c(
"She", "sells", "sea", "shells", "by", "the", "seashore",
"The", "shells", "she", "sells", "are", "surely", "seashells",
"So", "if", "she", "sells", "shells", "on", "the", "seashore",
"I'm", "sure", "she", "sells", "seashore", "shells"
)
nchar(sea_shells)
l = nchar(sea_shells)
l
min(l)
unique(l)
sort(unique(l))
l = nchar(sea_shells)
for (len in sort(unique(l))){
write(paste0("The words ",
paste(sea_shells[which(l==len)], ", "),
" have ", len, " letters."), "")
}
paste(sea_shells[which(l==len)], ", ")
len
len = 2
which(l==len)
sea_shells[which(l==len)]
paste(sea_shells[which(l==len)], ", ")
cat(sea_shells[which(l==len)], ", ")
cat(sea_shells[which(l==len)], sep = ", ")
l = nchar(sea_shells)
for (len in sort(unique(l))){
write(paste0("The words ",
cat(sea_shells[which(l==len)], sep = ", "),
" have ", len, " letters."), "")
}
paste0("The words ",
cat(sea_shells[which(l==len)], sep = ", "),
" have ", len, " letters.")
cat(sea_shells[which(l==len)], sep = ", ")
sprintf("The words %s have %i letters", cat(sea_shells[which(l==len)], sep = ", "), len )
cat(sea_shells[which(l==len)], sep = ", ")
paste0(sea_shells[which(l==len)], sep = ", ")
sprintf("The words %s have %i letters", paste0(sea_shells[which(l==len)], sep = ", "), len )
sprintf("The words %s have %i letters", paste0(sea_shells[which(l==len)], collapse = ", "), len )
l = nchar(sea_shells)
for (len in sort(unique(l))){
str = sprintf("The word(s) %s have %i letters",
paste0(sea_shells[which(l==len)], collapse = ", "),
len )
write(str, "")
}
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 5, fig.height = 5, fig.align = 'center', eval = T, collapse = T)
install.packages("reticulate")
unlink('Documents/Curso-Master/pythRon/into_types_py_cache', recursive = TRUE)
unlink('Documents/Curso-Master/pythRon/into_types_py_cache', recursive = TRUE)
setwd("~/Documents/Curso-Master/pythRon")
system("touch py_ex.Rmd")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, fig.width = 5, fig.height = 5, fig.align = 'center', eval = F, collapse = T, echo = F)
